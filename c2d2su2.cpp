/*!-----------------------------------------------------------------------------------------------------
 * \file c2d2su2.cpp
 * \C++ script for creating grid.su2 file from grid.p3d file, with grid.p3d file generated by Construct2d
 * \author Renato Tognaccini
 * \date 01-06-2018
 * \organization: Dipartimento Ingegneria Industriale, Universit√† di Napoli Federico II
 * \version 1.0
 * \Interactive input requires grid name string and number of cells in the wake (only in case of C-grid)
 * \Input file:  grid.p3d
 * \Output file: grid.su2
 *------------------------------------------------------------------------------------------------------
 */

#include <fstream>
#include <iostream>
#include<ctime>

using namespace std;

int main()
{
    
    /*--- Local variables ---*/
    
    int i, j, ip, jp;
    int KindElem, KindBound, iElem, inode, inode0, inode1, inode2, inode3;
    int ncwake, npi, npj, ni, nj, ncairfoil, npoints, ncfarfield;
    
    string grid_name;
    ofstream su2_file;
    ifstream p3d_file;
    
    /*----- Setting program name, date and time --------------*/
    
    string program, vsn;
    program="c2d2su2"; vsn="1.0";
    
    time_t tt; struct tm * ti; time (&tt); ti = localtime(&tt);
    
    /*--- Set the VTK type for the interior elements and the boundary elements ---*/
    KindElem  = 9; // Quad
    KindBound = 3; // Line
    cout << "**********************************************\n";
    cout << "*                                            *\n";
    cout << "*           c2d2su2 grid converter           *\n";
    cout << "*                                            *\n";
    cout << "**********************************************\n";
    cout << " \n";
    cout << "Enter grid name string: ";
    getline (cin, grid_name);
    
    cout << "\nEnter number of cells along the wake (0 => O-grid): ";
    cin >> ncwake;
    cout << " \n";
    
    /*--- Open .p3d grid file ---*/
    p3d_file.precision(15);
    p3d_file.open("grid.p3d", ios::in);
    
    /*--- Start reading .p3d grid file ---*/
    p3d_file >> npi >> npj;
    ni=npi-1; nj=npj-1; ncairfoil=ni-2*ncwake;
    
    cout << "Grid name: " << grid_name << "\n";
    cout << "(ni,nj,nwake): " << ni << "  " << nj << "  " << ncwake << "\n";
    cout << " \n";
    if (ncwake == 0)
    {
        cout << "O-grid" << "\n";
    }
    else
    {
        cout << "C-grid" << "\n";
    }
    
    /*------ Allocate grid coordinates arrays -----------*/
    double** x = new double*[npi];
    for( i = 0; i < npi; ++i)
        x[i] = new double[npj];
    double** y = new double*[npi];
    for( i = 0; i < npi; ++i)
        y[i] = new double[npj];
    
    /*-------------- Read grid coordinates --------------*/
    for (j = 0; j<= nj; j++)
    {
        for (i = 0; i<=ni; i++)
        {
            p3d_file >> x[i][j];
        }
    }
    
    for (j = 0; j<= nj; j++)
    {
        for (i = 0; i<=ni; i++)
        {
            p3d_file >> y[i][j];
        }
    }
    
    /*--- Open .su2 grid file ---*/
    su2_file.precision(15);
    su2_file.open("grid.su2", ios::out);
    
    
    su2_file << "% " << grid_name << endl;
    su2_file << "% " << asctime(ti);
    su2_file << "%" << endl;
    su2_file << "% Problem dimension" << endl;
    su2_file << "%" << endl;
    su2_file << "NDIME= 2" << endl;
    su2_file << "%" << endl;
    su2_file << "% Inner element connectivity" << endl;
    su2_file << "%" << endl;
    su2_file << "NELEM= " <<  ni*nj << endl;
    
    /*--- Write the element connectivity ---*/
    
    if (ncwake == 0)
    {
        /*------ O-grid-----------*/
        for (j = 1; j<= nj; j++)
        {
            for (i = 1; i<ni; i++)
                
            {
                iElem  = i+(j-1)*ni-1;
                inode0 = iElem;
                inode1 = inode0+1;
                inode3 = i+j*ni-1;
                inode2 = inode3+1;
                su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
            }
            
            iElem  = ni+(j-1)*ni-1;
            inode0 = iElem;
            inode1 = (j-1)*ni;
            inode3 = ni+j*ni-1;
            inode2 = j*ni;
            su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
        
        }

    }
    
    else
    
    {
        /*------ C-grid-----------*/

        /*--- Elements on the first row need a special treatment ---*/
        for (i = 0; i<ni-1-ncwake; i++)
        {
            iElem  = i;
            inode0 = i;
            inode1 = i+1;
            inode2 = i+1+ni-ncwake;
            inode3 = i+ni-ncwake;
            su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
        }
    
        i = ni-ncwake-1; iElem = i;
        inode0 = i;
        inode1 = ncwake;
        inode2 = i+1+ni-ncwake;
        inode3 = i+ni-ncwake;
        su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
    
        jp = ncwake;
        for (i = ni-ncwake; i<=ni-1; i++)
        {
            iElem  = i;
            inode0 = jp;
            inode1 = jp-1;
            inode2 = i+1+ni-ncwake;
            inode3 = i+ni-ncwake;
            su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
            jp=jp-1;
        }
    
        /*-------------------- Standard row ----------------------*/
        for (j = 1; j<= nj-1; j++)
        {
            for (i = 0; i<=ni-1; i++)
            {
                iElem  = i+ni*j;
                inode0 = i+npi*j-(ncwake+1);
                inode1 = inode0+1;
                inode3 = i+npi*(j+1)-(ncwake+1);
                inode2 = inode3+1;
                su2_file << KindElem << "\t" << inode0 << "\t" << inode1 << "\t" << inode2 << "\t" << inode3 << "\t" << iElem << endl;
            }
        }
    
    }
    
    /*--- Compute the number of nodes and write the node coordinates ---*/
    su2_file << "%" << endl;
    su2_file << "% Node coordinates" << endl;
    su2_file << "%" << endl;
    
    if (ncwake ==0)
    {
        npoints = ni*(nj+1);
    }
    else
    {
        npoints = ni*npj;
    }
    su2_file << "NPOIN= " << npoints << endl;
    
    if (ncwake == 0)
    {
        /*----    O-grid -------- */
        for (jp = 0; jp<= nj; jp++)
        {
            for (ip = 0; ip<ni; ip++)
            {
                inode = ip + jp*ni;
                su2_file << x[ip][jp] << "\t" << y[ip][jp] << "\t" << inode << endl;
            }
        }
        
        
    }
    
    else
    {
        /*----- C-grid ------*/
    
        /*--- Nodes on the first row need a special treatment ---*/
        for (i = 0; i<=ni-ncwake-1; i++)
        {
            inode = i;
            su2_file << x[i][0] << "\t" << y[i][0] << "\t" << inode << endl;
        }
    
        /*------------------ Rest of the grid ---------------------*/
        for (j = 1; j<= nj; j++)
        {
            for (i = 0; i<=ni; i++)
            {
                inode = i + npi*j-(ncwake+1);
                su2_file << x[i][j] << "\t" << y[i][j] << "\t" << inode << endl;
            }
        }
    }
    
    /*--- Write topology of boundaries ---*/
    /*--- Write the header information for the boundary markers ---*/
    su2_file << "%" << endl;
    su2_file << "% Boundary elements" << endl;
    su2_file << "%" << endl;
    su2_file << "NMARK= 2" << endl;
    
    /*--- Write the boundary information for each marker ---*/
    
    /*--------------------- Airfoil ------------------------*/
    su2_file << "MARKER_TAG= airfoil" << endl;
    su2_file << "MARKER_ELEMS= "<< ncairfoil << endl;
    
    if ( ncwake == 0)
    {
        
        for (i = 1; i<ni; i++)
        {
            su2_file << KindBound << "\t" << i-1 << "\t" << i  << endl;
        }
        su2_file << KindBound << "\t" << ni-1 << "\t" << 0 << endl;
        
    }
    else
    {
        for (i = ncwake; i < ncwake+ncairfoil-1; i++)
        {
            su2_file << KindBound << "\t" << i << "\t" << (i + 1) << endl;
        }
        su2_file << KindBound << "\t" << (ncwake+ncairfoil-1) << "\t" << ncwake << endl;
        
    }

    /*--------------------- Far field ------------------------*/

    if (ncwake == 0)
    {
        ncfarfield = ncairfoil;
    }
    else
    {
        ncfarfield = ni+2*nj;
    }
    su2_file << "MARKER_TAG= farfield" << endl;
    su2_file << "MARKER_ELEMS= "<< ncfarfield << endl;
    
    if (ncwake == 0)
    {
        for (i = 1; i<ni; i++)
        {
            inode3 = i+nj*ni -1;
            su2_file << KindBound << "\t" << inode3  << "\t" << inode3+1  << endl;
        }
        inode3 = ni+nj*ni -1;
        su2_file << KindBound << "\t" << inode3 << "\t" << nj*ni << endl;

    }
    else
    {
        
        i = 0; inode0 = 0;
        for (j = 0; j < nj; j++)
        {
            inode3 = i+npi*(j+1)-(ncwake+1);
            su2_file << KindBound << "\t" << inode0 << "\t" << inode3 << endl;
            inode0 = inode3;
        }
    
        j = nj-1;inode3 = npi*(j+1)-(ncwake+1);
        for (i = 0; i < ni; i++)
        {
            inode2 = inode3+1;
            su2_file << KindBound << "\t" << inode3 << "\t" << inode2 << endl;
            inode3 =inode2;
        }
    
        i = ni-1; inode2 = i+1+npi*(nj)-(ncwake+1);
        for (j = nj-1; j >= 1; j--)
        {
            inode1 = i+1+npi*j-(ncwake+1);
            su2_file << KindBound << "\t" << inode2 << "\t" << inode1 << endl;
            inode2=inode1;
        }
        inode2 = i+1+npi-(ncwake+1); inode1 = 0;
        su2_file << KindBound << "\t" << inode2 << "\t" << inode1 << endl;
    
    }
    /*--- Free memory, close files and exit ---*/
    for (i = 0; i < npi; ++i)
        delete [] x[i];
    delete [] x;
    for (i = 0; i < npi; ++i)
        delete [] y[i];
    delete [] y;
    
    p3d_file.close();
    su2_file.close();
    
    return 0;
}
    
